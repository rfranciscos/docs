{
  "openapi": "3.0.0",
  "paths": {
    "/api/v2/auth/signup": {
      "post": {
        "operationId": "AuthController_signup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Create a api user",
        "tags": [
          "Auth",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options0",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Auth",
          "x-internal"
        ]
      }
    },
    "/api/v2/auth/signup-otp": {
      "post": {
        "operationId": "AuthController_signupOtp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupWithTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a api user on OTP",
        "tags": [
          "Auth",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options1",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Auth",
          "x-internal"
        ]
      }
    },
    "/api/v2/auth/login": {
      "post": {
        "description": "Guide for the Auth can be found in [Auths](https://killbapi.stoplight.io/docs/killb-v2/92fb466bf5e4b).",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Generate an access token",
        "tags": [
          "Auth"
        ]
      },
      "options": {
        "operationId": "options2",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v2/auth/refresh": {
      "post": {
        "description": "Guide for the Auth can be found in [Auths](https://killbapi.stoplight.io/docs/killb-v2/92fb466bf5e4b).",
        "operationId": "AuthController_refresh",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Refresh an access token",
        "tags": [
          "Auth"
        ]
      },
      "options": {
        "operationId": "options3",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v2/auth/generate-token/{customer}": {
      "get": {
        "operationId": "AuthController_generateVerifyRegisterToken",
        "parameters": [
          {
            "name": "customer",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Generate a new register token",
        "tags": [
          "Auth",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options4",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "customer",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Auth",
          "x-internal"
        ]
      }
    },
    "/api/v2/auth/verify-otp": {
      "post": {
        "operationId": "AuthController_verifyOtp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Verify a otp",
        "tags": [
          "Auth",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options5",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Auth",
          "x-internal"
        ]
      }
    },
    "/api/v2/customers": {
      "post": {
        "operationId": "CustomerController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Create a customer",
        "tags": [
          "Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "get": {
        "operationId": "CustomerController_getOne",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get a customer by name",
        "tags": [
          "Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options6",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Customer",
          "x-internal"
        ]
      }
    },
    "/api/v2/customers/{id}": {
      "delete": {
        "operationId": "CustomerController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Soft delete a customer",
        "tags": [
          "Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "patch": {
        "operationId": "CustomerController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Update a customer",
        "tags": [
          "Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options7",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Customer",
          "x-internal"
        ]
      }
    },
    "/api/v2/customers/balances": {
      "get": {
        "operationId": "CustomerController_getBalances",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetBalancesResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get customer balances",
        "tags": [
          "Customer"
        ]
      },
      "options": {
        "operationId": "options8",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Customer"
        ]
      }
    },
    "/api/v2/customers/pre-fund/create": {
      "post": {
        "operationId": "CustomerController_createPreFundAccount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreFundAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePreFundAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Create a pre-fund wallet",
        "tags": [
          "Customer"
        ]
      },
      "options": {
        "operationId": "options9",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Customer"
        ]
      }
    },
    "/api/v2/customers/liquidities": {
      "get": {
        "operationId": "CustomerController_getLiquidity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetCustomerLiquidityResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get customer liquidities",
        "tags": [
          "Customer"
        ]
      },
      "options": {
        "operationId": "options10",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Customer"
        ]
      }
    },
    "/api/v2/customers/pairs": {
      "get": {
        "operationId": "CustomerController_getPairs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPairsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all available pairs and options",
        "tags": [
          "Customer"
        ]
      },
      "options": {
        "operationId": "options11",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Customer"
        ]
      }
    },
    "/api/v2/documents": {
      "get": {
        "operationId": "ClickAndSignController_findAll",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindingAllDocumentsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all documents for a customer",
        "tags": [
          "Documents",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options12",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Documents",
          "x-internal"
        ]
      }
    },
    "/api/v2/documents/{id}": {
      "get": {
        "operationId": "ClickAndSignController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindOneDocumentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get a document by id",
        "tags": [
          "Documents",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options13",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Documents",
          "x-internal"
        ]
      }
    },
    "/api/v2/documents/sign/bulk": {
      "post": {
        "operationId": "ClickAndSignController_signMultiple",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignMultipleDocumentsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Sign multiple documents",
        "tags": [
          "Documents",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options14",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Documents",
          "x-internal"
        ]
      }
    },
    "/api/v2/documents/sign/{id}": {
      "post": {
        "operationId": "ClickAndSignController_sign",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document signed successfully"
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignDocumentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Sign a document",
        "tags": [
          "Documents",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options15",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Documents",
          "x-internal"
        ]
      }
    },
    "/api/v2/documents/generate/{customerId}": {
      "post": {
        "operationId": "ClickAndSignController_generateTransactionDocument",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Document generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateDocumentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Generate transfer report document for customer signature",
        "tags": [
          "Documents",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options16",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Documents",
          "x-internal"
        ]
      }
    },
    "/api/v2/accounts": {
      "post": {
        "operationId": "AccountController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create Account",
        "tags": [
          "Account"
        ]
      },
      "get": {
        "operationId": "AccountController_queryAccount",
        "parameters": [
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "schema": {
              "example": "7f0a8ad6-29a1-4a66-a6c4-8bb398eb78d1",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "7f0a8ad6-29a1-4a66-a6c4-8bb398eb78d1",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "PSE",
                "ACH",
                "WIRE",
                "WALLET",
                "COELSA",
                "SPEI",
                "CUSTODIAL",
                "TRANSFIYA"
              ]
            }
          },
          {
            "name": "accountNumber",
            "required": false,
            "in": "query",
            "schema": {
              "example": "001134412",
              "type": "string"
            }
          },
          {
            "name": "routingNumber",
            "required": false,
            "in": "query",
            "schema": {
              "example": "1231312",
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "schema": {
              "example": "0x",
              "type": "string"
            }
          },
          {
            "name": "clabe",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cvu",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "required": false,
            "in": "query",
            "description": "Filter by first name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "middleName",
            "required": false,
            "in": "query",
            "description": "Filter by middle name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "required": false,
            "in": "query",
            "description": "Filter by last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyName",
            "required": false,
            "in": "query",
            "description": "Filter by company name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "Filter by email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get Accounts",
        "tags": [
          "Account"
        ]
      },
      "options": {
        "operationId": "options17",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v2/accounts/{id}": {
      "patch": {
        "operationId": "AccountController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update Account",
        "tags": [
          "Account"
        ]
      },
      "get": {
        "operationId": "AccountController_getOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get Account by id",
        "tags": [
          "Account"
        ]
      },
      "delete": {
        "operationId": "AccountController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Delete Account",
        "tags": [
          "Account"
        ]
      },
      "options": {
        "operationId": "options18",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v2/accounts/userId/{userId}": {
      "get": {
        "operationId": "AccountController_getByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateAccountResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get Accounts by UserId",
        "tags": [
          "Account"
        ]
      },
      "options": {
        "operationId": "options19",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Account"
        ]
      }
    },
    "/api/v2/webhooks": {
      "post": {
        "description": "Create a webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)",
        "operationId": "WebhookController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWebhookResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Create a webhook config.",
        "tags": [
          "Webhook"
        ]
      },
      "patch": {
        "description": "Endpoint responsible for UPDATE webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)",
        "operationId": "WebhookController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWebhookResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Update webhook config",
        "tags": [
          "Webhook"
        ]
      },
      "delete": {
        "description": "Endpoint responsible for REMOVE the webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)",
        "operationId": "WebhookController_delete",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Delete webhook config",
        "tags": [
          "Webhook"
        ]
      },
      "get": {
        "description": "Endpoint responsible for return a webhook config configured. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)",
        "operationId": "WebhookController_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get webhook config",
        "tags": [
          "Webhook"
        ]
      },
      "options": {
        "operationId": "options20",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Webhook"
        ]
      }
    },
    "/api/v2/users": {
      "post": {
        "operationId": "UserController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a user",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "UserController_get",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "middleName",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateOfBirth",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "required": false,
            "in": "query",
            "description": "A unique identifier used to identify your existing user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyName",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tradeName",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "legalStructure",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "establishedOn",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mainOwnerUser",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownerUsers",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "naics",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "naicsDescription",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "example": "PERSON",
              "type": "string",
              "enum": [
                "PERSON",
                "COMPANY"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get users",
        "tags": [
          "User"
        ]
      },
      "options": {
        "operationId": "options21",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "User"
        ]
      }
    },
    "/api/v2/users/{id}": {
      "patch": {
        "operationId": "UserController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "title": "PERSON",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreatePersonUserDto"
                      }
                    ]
                  },
                  {
                    "title": "COMPANY",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CreateCompanyUserDto"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update user",
        "tags": [
          "User"
        ]
      },
      "delete": {
        "operationId": "UserController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Delete user",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "UserController_getById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get users by ID",
        "tags": [
          "User"
        ]
      },
      "options": {
        "operationId": "options22",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "User"
        ]
      }
    },
    "/api/v2/users/person/document": {
      "post": {
        "operationId": "UserController_uploadDocumentPerson",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadPersonDocumentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Add person user document",
        "tags": [
          "User"
        ]
      },
      "options": {
        "operationId": "options23",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "User"
        ]
      }
    },
    "/api/v2/users/company/document": {
      "post": {
        "operationId": "UserController_uploadDocumentBusiness",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadBusinessDocumentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Add company user document",
        "tags": [
          "User"
        ]
      },
      "options": {
        "operationId": "options24",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "User"
        ]
      }
    },
    "/api/v2/savings": {
      "post": {
        "operationId": "SavingsController_onboard",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavingsCustodialAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavingsAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Create savings account",
        "tags": [
          "Savings"
        ]
      },
      "options": {
        "operationId": "options25",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Savings"
        ]
      }
    },
    "/api/v2/savings/transactions": {
      "get": {
        "operationId": "SavingsController_getTransactions",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "70bb2b47-1d79-4071-bfdb-a0b6a18b043b",
              "type": "string"
            }
          },
          {
            "name": "destinationAccountId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "1f3f8ec8-53a6-422b-82af-71bb9c7bd3a0",
              "type": "string"
            }
          },
          {
            "name": "originAccountId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "f4f49acb-c413-48b2-99b5-d5de57c34165",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "474a6f7c-9b61-417d-ba0c-11cde75d4599",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "DEPOSIT",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGetTransactionsReturn"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get transactions",
        "tags": [
          "Savings"
        ]
      },
      "options": {
        "operationId": "options26",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "70bb2b47-1d79-4071-bfdb-a0b6a18b043b",
              "type": "string"
            }
          },
          {
            "name": "destinationAccountId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "1f3f8ec8-53a6-422b-82af-71bb9c7bd3a0",
              "type": "string"
            }
          },
          {
            "name": "originAccountId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "f4f49acb-c413-48b2-99b5-d5de57c34165",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "474a6f7c-9b61-417d-ba0c-11cde75d4599",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "DEPOSIT",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Savings"
        ]
      }
    },
    "/api/v2/savings/{id}": {
      "get": {
        "operationId": "SavingsController_getOnboard",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavingsAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get savings account",
        "tags": [
          "Savings"
        ]
      },
      "options": {
        "operationId": "options27",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Savings"
        ]
      }
    },
    "/api/v2/savings/withdrawal": {
      "post": {
        "operationId": "SavingsController_withdrawal",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWithdrawalDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalSavingsReturn"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Create withdrawal",
        "tags": [
          "Savings"
        ]
      },
      "options": {
        "operationId": "options28",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Savings"
        ]
      }
    },
    "/api/v2/savings/{id}/balance": {
      "get": {
        "operationId": "SavingsController_getBalance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBalanceReturn"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get balance",
        "tags": [
          "Savings"
        ]
      },
      "options": {
        "operationId": "options29",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Savings"
        ]
      }
    },
    "/api/v2/savings/{id}/deposit-instructions/{type}": {
      "get": {
        "operationId": "SavingsController_getDepositInstructions",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "449b31b4-fca5-465e-99ea-7b7b28cfbccb",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "example": "ACH",
              "type": "string",
              "enum": [
                "ACH",
                "WIRE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepositInstructionsReturn"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get banking deposit instructions",
        "tags": [
          "Savings"
        ]
      },
      "options": {
        "operationId": "options30",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "example": "449b31b4-fca5-465e-99ea-7b7b28cfbccb",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "example": "ACH",
              "type": "string",
              "enum": [
                "ACH",
                "WIRE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Savings"
        ]
      }
    },
    "/api/v2/savings/{id}/crypto-deposit-instructions": {
      "get": {
        "operationId": "SavingsController_getWalletAddress",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCryptoDepositInstructionsReturn"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get crypto deposit instructions",
        "tags": [
          "Savings"
        ]
      },
      "options": {
        "operationId": "options31",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Savings"
        ]
      }
    },
    "/api/v2/quotations": {
      "post": {
        "description": "Create a new quotation",
        "operationId": "QuotationController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuotationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateQuotationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create Quotation",
        "tags": [
          "Quotations"
        ]
      },
      "options": {
        "operationId": "options32",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Quotations"
        ]
      }
    },
    "/api/v2/quotations/{id}": {
      "patch": {
        "description": "Update a new quotation",
        "operationId": "QuotationController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuotationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateQuotationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update Quotation",
        "tags": [
          "Quotations"
        ]
      },
      "get": {
        "description": "Get a quotation by id",
        "operationId": "QuotationController_getById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get Quotation",
        "tags": [
          "Quotations"
        ]
      },
      "options": {
        "operationId": "options33",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Quotations"
        ]
      }
    },
    "/api/v2/quotations/simulation": {
      "post": {
        "description": "Generate just a simulation of a quote",
        "operationId": "QuotationController_simulation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuotationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateQuotationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Simulate a Quotation",
        "tags": [
          "Quotations"
        ]
      },
      "options": {
        "operationId": "options34",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Quotations"
        ]
      }
    },
    "/api/v2/quotations/simulation/bank": {
      "post": {
        "description": "Generate just a simulation of a quote",
        "operationId": "QuotationController_bankSimulation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBankSimulationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateQuotationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Simulate a bank Quotation",
        "tags": [
          "Quotations",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options35",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Quotations",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/savings/customer": {
      "post": {
        "operationId": "BackofficeSavingsController_savingsCreateCustomer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerBackofficeDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options36",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/savings/create-static-memo": {
      "post": {
        "operationId": "BackofficeSavingsController_savingsCreateStaticMemo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStaticMemoDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options37",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/savings/create-virtual-account": {
      "post": {
        "operationId": "BackofficeSavingsController_savingsCreateVirtualAccount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualAccountDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options38",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/savings/customer-refused-reason/{userId}": {
      "get": {
        "operationId": "BackofficeSavingsController_getBridgeRefusedReason",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBridgeRefusedReason"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options39",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/savings/update-savings-strategy": {
      "post": {
        "operationId": "BackofficeSavingsController_savingsUpdateCustomerStrategy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSavingsStrategyDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options40",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/savings/get-bridge-info/{accountId}/{type}": {
      "get": {
        "operationId": "BackofficeSavingsController_getDepositDetails",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "example": "449b31b4-fca5-465e-99ea-7b7b28cfbccb",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "example": "ACH",
              "type": "string",
              "enum": [
                "ACH",
                "WIRE"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options41",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "example": "449b31b4-fca5-465e-99ea-7b7b28cfbccb",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "example": "ACH",
              "type": "string",
              "enum": [
                "ACH",
                "WIRE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/savings/create-layer2-subscription": {
      "post": {
        "operationId": "BackofficeSavingsController_createLayer2Subscription",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLayer2SubscriptionsDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options42",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Savings",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps": {
      "get": {
        "operationId": "BackofficeRampsController_getRamps",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by ramp status. Can be a single status string or an array of status strings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by ramp type. Can be a single type string or an array of type strings. Valid values: ON, OFF",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Filter by ramp ID. Can be a single ID string or an array of ID strings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRampsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options43",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by ramp status. Can be a single status string or an array of status strings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by ramp type. Can be a single type string or an array of type strings. Valid values: ON, OFF",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Filter by ramp ID. Can be a single ID string or an array of ID strings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/{rampId}/transactions": {
      "get": {
        "operationId": "BackofficeRampsController_getRampTransactions",
        "parameters": [
          {
            "name": "rampId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRampTransactionsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options44",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "rampId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/create-pre-fund-account": {
      "post": {
        "operationId": "BackofficeRampsController_savingsCreateStaticMemo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreFundAccountBackofficeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePreFundAccountBackofficeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options45",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/re-run": {
      "post": {
        "operationId": "BackofficeRampsController_reRunRamp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReRunRampDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReRunRampsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options46",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/execute-pending": {
      "post": {
        "operationId": "BackofficeRampsController_executePendingRamps",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutePendingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options47",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/manual-dispersion/init": {
      "post": {
        "operationId": "BackofficeRampsController_manualDispersionInit",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualDispersionRampDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualDispersionRampResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options48",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/manual-dispersion/complete": {
      "post": {
        "operationId": "BackofficeRampsController_manualDispersionComplete",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualDispersionRampDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualDispersionRampResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options49",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/manual-dispersion/retry": {
      "post": {
        "operationId": "BackofficeRampsController_manualDispersionRetry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualDispersionRampDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualDispersionRampResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options50",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/cancel": {
      "post": {
        "operationId": "BackofficeRampsController_cancel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelRampDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelRampsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options51",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/fail": {
      "post": {
        "operationId": "BackofficeRampsController_moveToFailed",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailRampDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailRampsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options52",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/expired": {
      "post": {
        "operationId": "BackofficeRampsController_moveToExpired",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailRampDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailRampsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options53",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/update-quote": {
      "post": {
        "operationId": "BackofficeRampsController_updateQuote",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuoteDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReRunRampsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options54",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/transfers/status/{status}": {
      "get": {
        "operationId": "BackofficeRampsController_getTransfersByStatus",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailRampsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options55",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ramps/check-cash-in-processing": {
      "post": {
        "operationId": "BackofficeRampsController_checkCashInProcessingStatus",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckCashInProcessingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options56",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/ramps": {
      "post": {
        "description": "This endpoint is responsible for executing the Ramp (On or/and Off). For more details about this endpoint, see here [Ramps](https://killbapi.stoplight.io/docs/killb-v2/71722efcded7f)",
        "operationId": "RampsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRampInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRampResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create Ramps",
        "tags": [
          "Ramps"
        ]
      },
      "get": {
        "description": "This endpoint is responsible for getting the Ramp list. For more details about this endpoint, see here [Ramps](https://killbapi.stoplight.io/docs/killb-v2/71722efcded7f)",
        "operationId": "RampsController_getQuery",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "required": false,
            "in": "query",
            "description": "A unique identifier used to identify your existing user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRampQueryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Query Ramps",
        "tags": [
          "Ramps"
        ]
      },
      "options": {
        "operationId": "options57",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Ramps"
        ]
      }
    },
    "/api/v2/ramps/{id}": {
      "patch": {
        "description": "This endpoint is responsible for executing the Ramp (On or/and Off). For more details about this endpoint, see here [Ramps](https://killbapi.stoplight.io/docs/killb-v2/71722efcded7f)",
        "operationId": "RampsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRampInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRampResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update Ramp",
        "tags": [
          "Ramps"
        ]
      },
      "get": {
        "description": "This endpoint is responsible for getting the Ramp by id. For more details about this endpoint, see here [Ramps](https://killbapi.stoplight.io/docs/killb-v2/71722efcded7f)",
        "operationId": "RampsController_getById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRampByIdResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get Ramp by id",
        "tags": [
          "Ramps"
        ]
      },
      "options": {
        "operationId": "options58",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Ramps"
        ]
      }
    },
    "/api/v2/ramps/{id}/status-history": {
      "get": {
        "description": "This endpoint is responsible for getting the Ramp status history. For more details about this endpoint, see here [Ramps](https://killbapi.stoplight.io/docs/killb-v2/71722efcded7f)",
        "operationId": "RampsController_getStatusHistoryById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRampStatusResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get ramp status history",
        "tags": [
          "Ramps"
        ]
      },
      "options": {
        "operationId": "options59",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Ramps"
        ]
      }
    },
    "/api/v2/ramps/{id}/receipt": {
      "get": {
        "description": "This endpoint is return an HTML receipt for the Ramp.",
        "operationId": "RampsController_getReceipt",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get Ramp Receipt in HTML",
        "tags": [
          "Ramps"
        ]
      },
      "options": {
        "operationId": "options60",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Ramps"
        ]
      }
    },
    "/api/v2/ramps/{id}/receipt-json": {
      "get": {
        "description": "This endpoint is return an JSON receipt for the Ramp.",
        "operationId": "RampsController_getJsonReceipt",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get Ramp Receipt in JSON",
        "tags": [
          "Ramps"
        ]
      },
      "options": {
        "operationId": "options61",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Ramps"
        ]
      }
    },
    "/api/v2/ramps/{id}/receipt/file": {
      "get": {
        "description": "This endpoint is return a receipt in PDF format.",
        "operationId": "RampsController_getFile",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get Ramp Receipt in PDF format",
        "tags": [
          "Ramps"
        ]
      },
      "options": {
        "operationId": "options62",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Ramps"
        ]
      }
    },
    "/api/v2/ramps/cash-in/redirect": {
      "get": {
        "description": "This endpoint is return an HTML with deposit message",
        "operationId": "RampsController_cashInRedirect",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get cash-in redirect HTML",
        "tags": [
          "Ramps",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options63",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Ramps",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/legal/documents": {
      "get": {
        "operationId": "BackofficeLegalController_getAllSourceOfFundsDocuments",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllSourceOfDocumentsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Legal",
          "x-internal"
        ],
        "x-internal": true
      },
      "post": {
        "operationId": "BackofficeLegalController_approveSourceOfFundsDocuments",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveSourceOfFundsInputDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Legal",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options64",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Legal",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/legal/downgrade-user": {
      "post": {
        "operationId": "BackofficeLegalController_downgradeUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DowngradeUserLevelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The User has been successfully downgraded."
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Legal",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options65",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Legal",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/batch/create-bach-file": {
      "post": {
        "operationId": "BackofficeBatchFileController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackOfficeBatchFileCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackOfficeBatchFileCreate"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options66",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/batch/update-batch-file-complete": {
      "post": {
        "operationId": "BackofficeBatchFileController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBatchFileDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBatchFileDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options67",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/batch/update-transfer-to-batch": {
      "post": {
        "operationId": "BackofficeBatchFileController_updateTransferToBatchFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransferToBatchFilesDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTransferToBatchFilesDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options68",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/batch/get-last-batch-files": {
      "get": {
        "operationId": "BackofficeBatchFileController_getLastBatchFiles",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBatchFileDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options69",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/batch": {
      "get": {
        "operationId": "BackofficeBatchFileController_getBatchFiles",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by batch file status. Can be a single status or an array of statuses. Example: CREATED or CREATED,PROCESSING,COMPLETED",
            "schema": {
              "type": "string",
              "enum": [
                "CREATED",
                "PROCESSING",
                "COMPLETED",
                "FAILED"
              ]
            }
          },
          {
            "name": "bank",
            "required": false,
            "in": "query",
            "description": "Filter by bank. Can be a single bank or an array of banks. Example: OCCIDENT or OCCIDENT,COOPCENTRAL",
            "schema": {
              "type": "string",
              "enum": [
                "OCCIDENT",
                "COOPCENTRAL",
                "MANUAL",
                "COBRE",
                "MONO"
              ]
            }
          },
          {
            "name": "externalId",
            "required": false,
            "in": "query",
            "description": "Filter by external ID",
            "schema": {
              "example": "ext_123456789",
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": false,
            "in": "query",
            "description": "Filter by filename (partial match)",
            "schema": {
              "example": "OCCIDENT_batch",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "default": "createdAt",
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "completedAt",
                "processedAt",
                "status",
                "bank"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBatchFilesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get batch files with pagination and filtering",
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options70",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by batch file status. Can be a single status or an array of statuses. Example: CREATED or CREATED,PROCESSING,COMPLETED",
            "schema": {
              "type": "string",
              "enum": [
                "CREATED",
                "PROCESSING",
                "COMPLETED",
                "FAILED"
              ]
            }
          },
          {
            "name": "bank",
            "required": false,
            "in": "query",
            "description": "Filter by bank. Can be a single bank or an array of banks. Example: OCCIDENT or OCCIDENT,COOPCENTRAL",
            "schema": {
              "type": "string",
              "enum": [
                "OCCIDENT",
                "COOPCENTRAL",
                "MANUAL",
                "COBRE",
                "MONO"
              ]
            }
          },
          {
            "name": "externalId",
            "required": false,
            "in": "query",
            "description": "Filter by external ID",
            "schema": {
              "example": "ext_123456789",
              "type": "string"
            }
          },
          {
            "name": "filename",
            "required": false,
            "in": "query",
            "description": "Filter by filename (partial match)",
            "schema": {
              "example": "OCCIDENT_batch",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 50,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "default": "createdAt",
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "completedAt",
                "processedAt",
                "status",
                "bank"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice BatchFile",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/customers/create-pre-fund-account": {
      "post": {
        "operationId": "BackofficeCustomerController_executePendingRamps",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreFundAccountByCustomerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePreFundAccountByCustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options71",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/customers": {
      "get": {
        "operationId": "BackofficeCustomerController_getCustomersInfo",
        "parameters": [],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options72",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/customers/update-customer-strategy": {
      "post": {
        "operationId": "BackofficeCustomerController_updateCustomerStrategy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerStrategyDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options73",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/customers/liquidity": {
      "get": {
        "operationId": "BackofficeCustomerController_getCustomerLiquidity",
        "parameters": [],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "patch": {
        "operationId": "BackofficeCustomerController_updateCustomerLiquidity",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerLiquidityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomerLiquidityResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          },
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options74",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/customers/pre-fund-balance": {
      "get": {
        "operationId": "BackofficeCustomerController_getCustomerPreFundBalance",
        "parameters": [],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options75",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Customer",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ops/providers/balance": {
      "get": {
        "operationId": "BackofficeOpsController_downgradeUser",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetProvidersBalanceResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ops",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options76",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ops",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/ops/change-level": {
      "post": {
        "operationId": "BackofficeOpsController_changeLevel",
        "parameters": [],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "tags": [
          "BackOffice Ops",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options77",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Ops",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/providers": {
      "post": {
        "description": "Creates a new liquidity provider",
        "operationId": "ProviderController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProviderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "409": {
            "description": "Provider code already exists"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Create a provider",
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ],
        "x-internal": true
      },
      "get": {
        "description": "Retrieves all providers including inactive ones",
        "operationId": "ProviderController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateProviderResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "List all providers",
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options78",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/providers/{id}": {
      "get": {
        "description": "Retrieves a specific provider record",
        "operationId": "ProviderController_findById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Provider ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provider found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProviderResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get a provider by ID",
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ],
        "x-internal": true
      },
      "put": {
        "description": "Updates an existing provider",
        "operationId": "ProviderController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Provider ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProviderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Provider not found"
          },
          "409": {
            "description": "Provider code already exists"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Update a provider",
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ],
        "x-internal": true
      },
      "delete": {
        "description": "Deletes a provider (use with caution)",
        "operationId": "ProviderController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Provider ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Provider deleted successfully"
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Delete a provider",
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options79",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Provider ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/providers/code/{code}": {
      "get": {
        "description": "Retrieves a specific provider record by its code",
        "operationId": "ProviderController_findByCode",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "description": "Provider code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provider found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProviderResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": [],
            "x-api-key": []
          }
        ],
        "summary": "Get a provider by code",
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options80",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "description": "Provider code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Providers",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/monetizations": {
      "post": {
        "operationId": "MonetizationController_create",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMonetizationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMonetizationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ],
        "x-internal": true
      },
      "get": {
        "operationId": "MonetizationController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromCurrency",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toCurrency",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outProviderCode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inProviderCode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateMonetizationResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options81",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/monetizations/bulk": {
      "post": {
        "operationId": "MonetizationController_createBulk",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBulkMonetizationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBulkMonetizationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options82",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/monetizations/{id}": {
      "patch": {
        "operationId": "MonetizationController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMonetizationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMonetizationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ],
        "x-internal": true
      },
      "get": {
        "operationId": "MonetizationController_findById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMonetizationResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options83",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ]
      }
    },
    "/api/v2/backoffice/monetizations/{id}/balances": {
      "get": {
        "operationId": "MonetizationController_findProviderBalances",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options84",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "BackOffice Monetization",
          "x-internal"
        ]
      }
    },
    "/api/v2/webhook-receiver/{providerId}/{type}": {
      "post": {
        "operationId": "WebhookReceiverController_create",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-webhook-signature",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Webhook receiver",
        "tags": [
          "WebhookReceiver",
          "x-internal"
        ],
        "x-internal": true
      },
      "options": {
        "operationId": "options85",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-webhook-signature",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "WebhookReceiver",
          "x-internal"
        ]
      }
    },
    "/api/v2/banks": {
      "get": {
        "operationId": "BankController_get",
        "parameters": [
          {
            "name": "countryCode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBanksResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get Bank list by countryCode",
        "tags": [
          "Bank"
        ]
      },
      "options": {
        "operationId": "options86",
        "summary": "Options",
        "description": "Options method",
        "parameters": [
          {
            "name": "countryCode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Bank"
        ]
      }
    },
    "/api/v2/faker/cash-in": {
      "post": {
        "description": "This endpoint is responsible for faking a cash-in.",
        "operationId": "FakerController_fakeMxnCashIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FakerCashInDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Fake cash-in (SANDBOX)",
        "tags": [
          "Faker"
        ]
      },
      "options": {
        "operationId": "options87",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Faker"
        ]
      }
    },
    "/api/v2/faker/cash-out": {
      "post": {
        "description": "This endpoint is responsible for faking a cash-out confirmation.",
        "operationId": "FakerController_fakeCashOut",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FakerCashOutDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Fake cash-out confirmation (SANDBOX)",
        "tags": [
          "Faker"
        ]
      },
      "options": {
        "operationId": "options88",
        "summary": "Options",
        "description": "Options method",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Faker"
        ]
      }
    },
    "/api/v2/open-api-json": {
      "get": {
        "operationId": "getApiJson",
        "summary": "Open API JSON",
        "description": "API JSON schema with all endpoints",
        "tags": [
          "Open API"
        ],
        "responses": {
          "200": {
            "description": "Return the OpenAPI JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "operationId": "options89",
        "summary": "Options",
        "description": "Options method",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-internal": true,
        "tags": [
          "Open API"
        ]
      }
    }
  },
  "info": {
    "title": "Tarantino V2 API",
    "description": "Tarantino V2 REST API documentation",
    "version": "2.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://teste-94u93qnn.uc.gateway.dev",
      "description": "Sandbox"
    },
    {
      "url": "https://killb.app",
      "description": "Production"
    }
  ],
  "components": {
    "securitySchemes": {
      "x-api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "jwt": {
        "authorizationUrl": "/auth/login",
        "flows": {
          "implicit": {
            "authorizationUrl": "/auth/login",
            "scopes": {}
          }
        },
        "type": "oauth2",
        "x-google-issuer": "INTERNAL_SANDBOX",
        "x-google-audiences": "TARANTINO_API",
        "x-google-jwks_uri": "https://storage.googleapis.com/public_keys_jwk/public-sandbox.json"
      }
    },
    "schemas": {
      "SignupDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "email",
          "password",
          "customerName",
          "roles"
        ]
      },
      "SignupResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "customerId",
          "email",
          "active",
          "deletedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "BadRequestArgument": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "email"
          },
          "value": {
            "type": "string",
            "example": "invalid@email.com"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "API_USER.0001"
          },
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BadRequestArgument"
            }
          },
          "message": {
            "example": [
              "User not found",
              "Account not found"
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "statusCode": {
            "type": "string",
            "example": "400"
          }
        },
        "required": [
          "errorCode",
          "arguments",
          "message",
          "statusCode"
        ]
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "string",
            "example": "500"
          },
          "message": {
            "example": [
              "Internal server error"
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "statusCode",
          "message"
        ]
      },
      "SignupWithTokenDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password",
          "token"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "expiresIn": {
            "type": "number",
            "example": 3600000,
            "description": "Number in milliseconds"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "expiresIn",
          "refreshToken"
        ]
      },
      "RefreshDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "RefreshResponseDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "expiresIn": {
            "type": "number",
            "example": 3600000,
            "description": "Number in milliseconds"
          }
        },
        "required": [
          "refreshToken",
          "accessToken",
          "expiresIn"
        ]
      },
      "VerifyOtpDto": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string",
            "description": "The otp to verify"
          },
          "email": {
            "type": "string",
            "description": "Email"
          }
        },
        "required": [
          "otp",
          "email"
        ]
      },
      "CreateCustomerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateCustomerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "strategiesByPair": {
            "type": "object"
          },
          "availableProducts": {
            "type": "object"
          },
          "apiKey": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "strategiesByPair",
          "availableProducts",
          "apiKey",
          "active",
          "deletedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateCustomerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "strategiesByPair": {
            "type": "object"
          },
          "availableProducts": {
            "type": "object"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "UpdateCustomerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "strategiesByPair": {
            "type": "object"
          },
          "availableProducts": {
            "type": "object"
          },
          "apiKey": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "strategiesByPair",
          "availableProducts",
          "apiKey",
          "active",
          "deletedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetCustomerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "strategiesByPair": {
            "type": "object"
          },
          "availableProducts": {
            "type": "object"
          },
          "apiKey": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "strategiesByPair",
          "availableProducts",
          "apiKey",
          "active",
          "deletedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetBalancesResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "customerId",
          "accountId",
          "currency",
          "amount",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreatePreFundAccountDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "USDC",
              "USDT"
            ],
            "example": "USDC"
          },
          "network": {
            "type": "string",
            "enum": [
              "POLYGON",
              "ERC20",
              "SOLANA",
              "TRON",
              "ARBITRUM",
              "BSC"
            ],
            "example": "POLYGON"
          }
        },
        "required": [
          "currency",
          "network"
        ]
      },
      "CreatePreFundAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "example": "PRE_FUND"
          },
          "address": {
            "type": "string",
            "description": "A wallet address"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "USDC",
              "USDT"
            ],
            "example": "USDC"
          },
          "network": {
            "type": "string",
            "enum": [
              "POLYGON",
              "ERC20",
              "SOLANA",
              "TRON",
              "ARBITRUM",
              "BSC"
            ],
            "example": "POLYGON"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "address",
          "currency",
          "network",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetCustomerLiquidityResponseDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "currency",
          "amount"
        ]
      },
      "GetPairsResponseDto": {
        "type": "object",
        "properties": {
          "pairs": {
            "description": "Available trading pairs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "regular": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "preFund": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Available options for each currency",
            "example": {
              "USDC": {
                "regular": [
                  "POLYGON",
                  "SOLANA",
                  "TRON"
                ],
                "preFund": [
                  "PRE_FUND_POLYGON",
                  "PRE_FUND_SOLANA",
                  "PRE_FUND_TRON"
                ]
              },
              "USDT": {
                "regular": [
                  "POLYGON",
                  "SOLANA",
                  "TRON"
                ],
                "preFund": [
                  "PRE_FUND_POLYGON",
                  "PRE_FUND_SOLANA",
                  "PRE_FUND_TRON"
                ]
              },
              "USD": {
                "regular": [
                  "WIRE",
                  "SWIFT"
                ],
                "preFund": [
                  "PRE_FUND"
                ]
              },
              "COP": {
                "regular": [
                  "PSE",
                  "BANK_TRANSFER"
                ],
                "preFund": [
                  "PRE_FUND"
                ]
              },
              "MXN": {
                "regular": [
                  "SPEI"
                ],
                "preFund": [
                  "PRE_FUND"
                ]
              }
            }
          }
        },
        "required": [
          "pairs",
          "options"
        ]
      },
      "FindOneDocumentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "title": {
            "type": "string",
            "example": "Document Report"
          },
          "type": {
            "type": "string",
            "example": "TRANSACTION_REPORT"
          },
          "status": {
            "type": "string",
            "example": "PENDING"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "documentUrl": {
            "type": "string",
            "example": "https://example.com/document.pdf"
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "status",
          "createdAt",
          "updatedAt",
          "documentUrl"
        ]
      },
      "FindingAllDocumentsResponseDto": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FindOneDocumentResponseDto"
            }
          }
        },
        "required": [
          "documents"
        ]
      },
      "SignMultipleDocumentsResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Documents signed successfully"
          },
          "documentsSigned": {
            "example": [
              "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentAlreadySignedOrNotFound": {
            "example": [
              {
                "id": "4d23aa52-1b40-4584-a8ea-58aba6099c5c",
                "reason": "Document not found"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "message",
          "documentsSigned",
          "documentAlreadySignedOrNotFound"
        ]
      },
      "SignDocumentResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Document signed successfully"
          },
          "documentId": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "documentUrl": {
            "type": "string",
            "example": "https://example.com/document.pdf"
          },
          "status": {
            "type": "string",
            "example": "PENDING"
          }
        },
        "required": [
          "message",
          "documentId",
          "documentUrl",
          "status"
        ]
      },
      "GenerateDocumentResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Documents generated successfully"
          },
          "documents": {
            "example": [
              "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "message",
          "documents"
        ]
      },
      "CompanyUserDocumentDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "NIT",
              "EIN",
              "CNPJ",
              "RFC",
              "CUIT"
            ],
            "example": "NIT"
          },
          "number": {
            "type": "string",
            "example": "123456"
          },
          "issuedCountryCode": {
            "type": "string",
            "example": "CO"
          }
        },
        "required": [
          "type",
          "number",
          "issuedCountryCode"
        ]
      },
      "PersonUserDocumentDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PASSPORT",
              "DRIVER_LICENSE",
              "NUIP",
              "RFC",
              "SSN",
              "CURP",
              "CPF",
              "INE",
              "IFE",
              "DNI",
              "DUI",
              "NIT"
            ],
            "example": "PASSPORT"
          },
          "number": {
            "type": "string",
            "example": "GE04292393",
            "format": "alphanumeric"
          },
          "issuedCountryCode": {
            "type": "string",
            "example": "CO"
          },
          "expeditionDate": {
            "type": "string",
            "example": "1992-01-01"
          },
          "cic": {
            "type": "string",
            "example": "1111111111",
            "description": "Required if document type is INE"
          },
          "identificadorCiudadano": {
            "type": "string",
            "description": "Required if document type is INE"
          },
          "ocr": {
            "type": "string",
            "example": "1111111111",
            "description": "Required if document type is IFE"
          },
          "numeroEmision": {
            "type": "string",
            "description": "Required if document type is IFE"
          }
        },
        "required": [
          "type",
          "number",
          "issuedCountryCode"
        ]
      },
      "PSEAccountDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "companyName": {
            "type": "string",
            "description": "Required if firstName is not present"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "bankCode": {
            "type": "string",
            "description": "You can find the code on the bank list endpoint"
          },
          "type": {
            "type": "string",
            "enum": [
              "savings",
              "checking"
            ]
          },
          "countryCode": {
            "type": "string"
          },
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          }
        },
        "required": [
          "firstName",
          "lastName",
          "companyName",
          "email",
          "phone",
          "accountNumber",
          "bankCode",
          "type",
          "countryCode",
          "document"
        ]
      },
      "SpeiAccountDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "companyName": {
            "type": "string",
            "description": "Required if firstName is not present"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          },
          "clabe": {
            "type": "string"
          },
          "clabeType": {
            "type": "string",
            "enum": [
              "CLABE",
              "DEBIT_CARD",
              "PHONE_NUMBER"
            ],
            "description": "ClabeType is necessary only for clabes with format PHONE_NUMBER, DEBIT_CARD"
          },
          "bankCode": {
            "type": "string",
            "description": "You can find the code on the bank list endpoint. BankCode is required only for the following clabe types: PHONE_NUMBER, DEBIT_CARD"
          },
          "countryCode": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "companyName",
          "phone",
          "email",
          "document",
          "clabe",
          "countryCode"
        ]
      },
      "WalletAccountDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "companyName": {
            "type": "string",
            "description": "Required if firstName is not present"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          },
          "currency": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "companyName",
          "phone",
          "email",
          "document",
          "currency",
          "network",
          "address",
          "countryCode"
        ]
      },
      "ACHAccountDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "companyName": {
            "type": "string",
            "description": "Required if firstName is not present"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "bankName": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          },
          "countryCode": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "companyName",
          "email",
          "phone",
          "bankName",
          "routingNumber",
          "accountNumber",
          "type",
          "document",
          "countryCode"
        ]
      },
      "AccountAddressDto": {
        "type": "object",
        "properties": {
          "street1": {
            "type": "string"
          },
          "street2": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        },
        "required": [
          "street1",
          "street2",
          "zipCode",
          "city",
          "stateCode",
          "countryCode"
        ]
      },
      "WIREAccountDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "companyName": {
            "type": "string",
            "description": "Required if firstName is not present"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "bankName": {
            "type": "string"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/AccountAddressDto"
          },
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          },
          "countryCode": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "companyName",
          "email",
          "phone",
          "accountNumber",
          "routingNumber",
          "bankName",
          "bankAddress",
          "document",
          "countryCode"
        ]
      },
      "TransfiyaAccountDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "description": "Required if companyName is not present"
          },
          "companyName": {
            "type": "string",
            "description": "Required if firstName is not present"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "account": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PHONE_NUMBER",
              "WALLET"
            ]
          },
          "countryCode": {
            "type": "string"
          },
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          }
        },
        "required": [
          "firstName",
          "lastName",
          "companyName",
          "email",
          "phone",
          "account",
          "type",
          "countryCode",
          "document"
        ]
      },
      "CreateAccountDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PSE",
              "ACH",
              "WIRE",
              "WALLET",
              "COELSA",
              "SPEI",
              "CUSTODIAL",
              "TRANSFIYA"
            ]
          },
          "userId": {
            "type": "string"
          },
          "data": {
            "oneOf": [
              {
                "title": "PSE",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PSEAccountDto"
                  }
                ]
              },
              {
                "title": "SPEI",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpeiAccountDto"
                  }
                ]
              },
              {
                "title": "WALLET",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WalletAccountDto"
                  }
                ]
              },
              {
                "title": "WIRE",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WIREAccountDto"
                  }
                ]
              },
              {
                "title": "ACH",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ACHAccountDto"
                  }
                ]
              },
              {
                "title": "TRANSFIYA",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransfiyaAccountDto"
                  }
                ]
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "A unique identifier used to identify your existing user."
          }
        },
        "required": [
          "type",
          "userId",
          "data",
          "externalId"
        ]
      },
      "CreateAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "data": {
            "oneOf": [
              {
                "title": "PSE",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PSEAccountDto"
                  }
                ]
              },
              {
                "title": "SPEI",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpeiAccountDto"
                  }
                ]
              },
              {
                "title": "WALLET",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WalletAccountDto"
                  }
                ]
              },
              {
                "title": "WIRE",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WIREAccountDto"
                  }
                ]
              },
              {
                "title": "ACH",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ACHAccountDto"
                  }
                ]
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "A unique identifier used to identify your existing user."
          },
          "complianceUrl": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "type",
          "status",
          "data",
          "externalId",
          "complianceUrl",
          "createdAt",
          "updatedAt"
        ]
      },
      "PSEUpdateAccountDto": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string"
          },
          "bankCode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          }
        }
      },
      "SPEIUpdateAccountDto": {
        "type": "object",
        "properties": {
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          },
          "clabe": {
            "type": "string"
          },
          "clabeType": {
            "type": "string"
          }
        }
      },
      "WALLETUpdateAccountDto": {
        "type": "object",
        "properties": {
          "document": {
            "oneOf": [
              {
                "title": "Company document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDocumentDto"
                  }
                ]
              },
              {
                "title": "Person document",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDocumentDto"
                  }
                ]
              }
            ]
          },
          "currency": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        }
      },
      "UpdateAccountDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "data": {
            "oneOf": [
              {
                "title": "PSE",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PSEUpdateAccountDto"
                  }
                ]
              },
              {
                "title": "SPEI",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SPEIUpdateAccountDto"
                  }
                ]
              },
              {
                "title": "WALLET",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WALLETUpdateAccountDto"
                  }
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "UpdateAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "data": {
            "oneOf": [
              {
                "title": "PSE",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PSEAccountDto"
                  }
                ]
              },
              {
                "title": "SPEI",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpeiAccountDto"
                  }
                ]
              },
              {
                "title": "WALLET",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WalletAccountDto"
                  }
                ]
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "A unique identifier used to identify your existing user."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "type",
          "status",
          "data",
          "externalId",
          "createdAt",
          "updatedAt"
        ]
      },
      "QueryAccountDataResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "data": {
            "oneOf": [
              {
                "title": "PSE",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PSEAccountDto"
                  }
                ]
              },
              {
                "title": "SPEI",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpeiAccountDto"
                  }
                ]
              },
              {
                "title": "WALLET",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WalletAccountDto"
                  }
                ]
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "type",
          "status",
          "data",
          "createdAt",
          "updatedAt"
        ]
      },
      "QueryAccountResponseDto": {
        "type": "object",
        "properties": {
          "totalPage": {
            "type": "number"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryAccountDataResponseDto"
            }
          }
        },
        "required": [
          "totalPage",
          "accounts"
        ]
      },
      "CreateWebhookDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://mywebhook.com"
          },
          "secret": {
            "type": "string",
            "example": "GJD6cyf6xbc@bvx6rvu"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RAMP",
                "USER",
                "TRANSACTION",
                "ACCOUNT",
                "CUSTODIAL_ACCOUNT"
              ]
            }
          }
        },
        "required": [
          "url",
          "secret",
          "events"
        ]
      },
      "CreateWebhookResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "customerId": {
            "type": "string",
            "example": "8ffce092-b97a-48bd-9efa-24c66ac7fe13"
          },
          "url": {
            "type": "string",
            "example": "https://mywebhook.com"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RAMP",
                "USER",
                "TRANSACTION",
                "ACCOUNT",
                "CUSTODIAL_ACCOUNT"
              ]
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          }
        },
        "required": [
          "id",
          "customerId",
          "url",
          "events",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateWebhookDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://mywebhook.com"
          },
          "active": {
            "type": "boolean"
          },
          "secret": {
            "type": "string",
            "example": "GJD6cyf6xbc@bvx6rvu"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RAMP",
                "USER",
                "TRANSACTION",
                "ACCOUNT",
                "CUSTODIAL_ACCOUNT"
              ]
            }
          }
        },
        "required": [
          "url",
          "active",
          "secret",
          "events"
        ]
      },
      "UpdateWebhookResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "customerId": {
            "type": "string",
            "example": "8ffce092-b97a-48bd-9efa-24c66ac7fe13"
          },
          "url": {
            "type": "string",
            "example": "https://mywebhook.com"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RAMP",
                "USER",
                "TRANSACTION",
                "ACCOUNT",
                "CUSTODIAL_ACCOUNT"
              ]
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          }
        },
        "required": [
          "id",
          "customerId",
          "url",
          "events",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetWebhookResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "customerId": {
            "type": "string",
            "example": "8ffce092-b97a-48bd-9efa-24c66ac7fe13"
          },
          "url": {
            "type": "string",
            "example": "https://mywebhook.com"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RAMP",
                "USER",
                "TRANSACTION",
                "ACCOUNT",
                "CUSTODIAL_ACCOUNT"
              ]
            }
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          }
        },
        "required": [
          "id",
          "customerId",
          "url",
          "events",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "WebhookEvent": {
        "type": "object",
        "properties": {}
      },
      "UserAddressDto": {
        "type": "object",
        "properties": {
          "street1": {
            "type": "string",
            "example": "68528 Dwight Court"
          },
          "street2": {
            "type": "string",
            "example": "Apt 488"
          },
          "city": {
            "type": "string",
            "example": "Fiorenze"
          },
          "state": {
            "type": "string",
            "example": "New York"
          },
          "zipCode": {
            "type": "string",
            "example": "48245000"
          },
          "countryCode": {
            "type": "string",
            "example": "CO"
          }
        },
        "required": [
          "street1",
          "city",
          "state",
          "zipCode",
          "countryCode"
        ]
      },
      "InvestmentProfile": {
        "type": "object",
        "properties": {
          "primarySourceOfFunds": {
            "type": "string",
            "example": "EMPLOYMENT",
            "enum": [
              "EMPLOYMENT",
              "SAVINGS",
              "WINNINGS",
              "MARITAL",
              "REAL_ESTATE",
              "TRUST",
              "INVESTMENT",
              "OTHER",
              "COMPANY",
              "COMPANY_CAPITAL",
              "LOAN",
              "PRIVATE_CAPITAL",
              "GRANT"
            ]
          },
          "primarySourceOfFundsDescription": {
            "type": "string",
            "example": "I work at Google"
          },
          "totalAssets": {
            "type": "string",
            "example": "UPTO_10K",
            "enum": [
              "UPTO_10K",
              "TEN_TO_100K",
              "ONEHUNDREDK_TO_1M",
              "ONE_TO_10M",
              "TEN_TO_50M",
              "FIFTY_TO_250M",
              "MORE_THAN_250M"
            ]
          },
          "usdValueOfFiat": {
            "type": "string",
            "example": "UPTO_10K",
            "enum": [
              "UPTO_10K",
              "TEN_TO_100K",
              "ONEHUNDREDK_TO_1M",
              "ONE_TO_10M",
              "TEN_TO_50M",
              "FIFTY_TO_250M",
              "MORE_THAN_250M"
            ]
          },
          "monthlyDeposits": {
            "type": "string",
            "example": "UPTO_5",
            "enum": [
              "UPTO_5",
              "FIVE_TO_10",
              "TEN_TO_25",
              "MORE_THAN_25"
            ]
          },
          "monthlyWithdrawals": {
            "type": "string",
            "example": "UPTO_5",
            "enum": [
              "UPTO_5",
              "FIVE_TO_10",
              "TEN_TO_25",
              "MORE_THAN_25"
            ]
          },
          "monthlyInvestmentDeposit": {
            "type": "string",
            "example": "UPTO_1K",
            "enum": [
              "UPTO_1K",
              "ONE_TO_100K",
              "ONEHUNDREDK_TO_1M",
              "MILLION_TO_5M",
              "MORE_THAN_5M"
            ]
          },
          "monthlyInvestmentWithdrawal": {
            "type": "string",
            "example": "UPTO_1K",
            "enum": [
              "UPTO_1K",
              "ONE_TO_100K",
              "ONEHUNDREDK_TO_1M",
              "MILLION_TO_5M",
              "MORE_THAN_5M"
            ]
          },
          "usdValueOfCrypto": {
            "type": "string",
            "example": "UPTO_1K",
            "enum": [
              "UPTO_1K",
              "ONE_TO_100K",
              "ONEHUNDREDK_TO_1M",
              "MILLION_TO_5M",
              "MORE_THAN_5M"
            ]
          },
          "monthlyCryptoDeposits": {
            "type": "string",
            "example": "UPTO_5",
            "enum": [
              "UPTO_5",
              "FIVE_TO_10",
              "TEN_TO_25",
              "MORE_THAN_25"
            ]
          },
          "monthlyCryptoWithdrawals": {
            "type": "string",
            "example": "UPTO_5",
            "enum": [
              "UPTO_5",
              "FIVE_TO_10",
              "TEN_TO_25",
              "MORE_THAN_25"
            ]
          },
          "monthlyCryptoInvestmentDeposit": {
            "type": "string",
            "example": "UPTO_1K",
            "enum": [
              "UPTO_1K",
              "ONE_TO_100K",
              "ONEHUNDREDK_TO_1M",
              "MILLION_TO_5M",
              "MORE_THAN_5M"
            ]
          },
          "monthlyCryptoInvestmentWithdrawal": {
            "type": "string",
            "example": "UPTO_1K",
            "enum": [
              "UPTO_1K",
              "ONE_TO_100K",
              "ONEHUNDREDK_TO_1M",
              "MILLION_TO_5M",
              "MORE_THAN_5M"
            ]
          }
        },
        "required": [
          "primarySourceOfFunds",
          "primarySourceOfFundsDescription",
          "totalAssets",
          "usdValueOfFiat",
          "monthlyDeposits",
          "monthlyWithdrawals",
          "monthlyInvestmentDeposit",
          "monthlyInvestmentWithdrawal",
          "usdValueOfCrypto",
          "monthlyCryptoDeposits",
          "monthlyCryptoWithdrawals",
          "monthlyCryptoInvestmentDeposit",
          "monthlyCryptoInvestmentWithdrawal"
        ]
      },
      "KycProfile": {
        "type": "object",
        "properties": {
          "fundsSendReceiveJurisdictions": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "engageInActivities": {
            "type": "array",
            "example": "NONE",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "ADULT_ENTERTAINMENT",
                "DRUGS",
                "FIREARMS",
                "GAMBLING",
                "MARIJUANA",
                "TUMBLING"
              ]
            }
          }
        },
        "required": [
          "fundsSendReceiveJurisdictions",
          "engageInActivities"
        ]
      },
      "CreatePersonUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "example": "Carlos"
          },
          "lastName": {
            "type": "string",
            "example": "Francisco"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1992-01-01"
          },
          "email": {
            "type": "string",
            "example": "example@test.com"
          },
          "phone": {
            "type": "string",
            "example": "+576015555555"
          },
          "address": {
            "$ref": "#/components/schemas/UserAddressDto"
          },
          "document": {
            "$ref": "#/components/schemas/PersonUserDocumentDto"
          },
          "nationality": {
            "type": "string",
            "example": "CO"
          },
          "citizenship": {
            "type": "string",
            "example": "CO"
          },
          "employmentStatus": {
            "type": "string",
            "example": "EMPLOYEE",
            "enum": [
              "EMPLOYEE",
              "SELF_EMPLOYED",
              "RETIRED",
              "UNEMPLOYED",
              "OTHER"
            ]
          },
          "employmentDescription": {
            "type": "string",
            "example": "Software Engineer"
          },
          "employerName": {
            "type": "string",
            "example": "Google"
          },
          "occupation": {
            "type": "string",
            "example": "Software Engineer"
          },
          "investmentProfile": {
            "$ref": "#/components/schemas/InvestmentProfile"
          },
          "kycProfile": {
            "$ref": "#/components/schemas/KycProfile"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "dateOfBirth",
          "email",
          "phone",
          "address",
          "document"
        ]
      },
      "CompanyKycProfile": {
        "type": "object",
        "properties": {
          "fundsSendReceiveJurisdictions": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "engageInActivities": {
            "type": "array",
            "example": "NONE",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "ADULT_ENTERTAINMENT",
                "DRUGS",
                "FIREARMS",
                "GAMBLING",
                "MARIJUANA",
                "TUMBLING"
              ]
            }
          },
          "regulatedStatus": {
            "type": "string",
            "enum": [
              "REGULATED",
              "REGISTERED",
              "LICENSED",
              "NONE",
              "NOT_REQUIRED"
            ],
            "example": "NONE"
          },
          "descriptionOfBusinessNature": {
            "type": "string",
            "example": "Electronic sales"
          }
        },
        "required": [
          "fundsSendReceiveJurisdictions",
          "engageInActivities",
          "regulatedStatus",
          "descriptionOfBusinessNature"
        ]
      },
      "CreateCompanyUserDto": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "example": "Gerlach, Baumbach and Bernhard\n"
          },
          "tradeName": {
            "type": "string",
            "example": "Babbleopia"
          },
          "registeredNumber": {
            "type": "string",
            "example": "123456"
          },
          "legalStructure": {
            "type": "string",
            "enum": [
              "C_CORP_PRIVATE",
              "C_CORP_PUBLIC",
              "HNWI",
              "LLC",
              "LLP",
              "LP",
              "S_CORP",
              "SOLE_PROP",
              "TRUST",
              "NON_PROFIT",
              "OTHER"
            ]
          },
          "description": {
            "type": "string"
          },
          "establishedOn": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/UserAddressDto"
          },
          "mainOwnerUser": {
            "type": "string"
          },
          "ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "naics": {
            "type": "string"
          },
          "naicsDescription": {
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/CompanyUserDocumentDto"
          },
          "investmentProfile": {
            "$ref": "#/components/schemas/InvestmentProfile"
          },
          "kycProfile": {
            "$ref": "#/components/schemas/CompanyKycProfile"
          }
        },
        "required": [
          "companyName",
          "address",
          "document"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PERSON",
              "COMPANY"
            ],
            "example": "PERSON"
          },
          "data": {
            "oneOf": [
              {
                "title": "PERSON",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreatePersonUserDto"
                  }
                ]
              },
              {
                "title": "COMPANY",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateCompanyUserDto"
                  }
                ]
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "A unique identifier used to identify your existing user.",
            "example": "d00e4f43-2022-42f3-ba1c-dcf4c1dcd934"
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "PersonUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "example": "Carlos"
          },
          "lastName": {
            "type": "string",
            "example": "Francisco"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "1992-01-01"
          },
          "email": {
            "type": "string",
            "example": "example@test.com"
          },
          "phone": {
            "type": "string",
            "example": "+576015555555"
          },
          "address": {
            "$ref": "#/components/schemas/UserAddressDto"
          },
          "document": {
            "$ref": "#/components/schemas/PersonUserDocumentDto"
          },
          "nationality": {
            "type": "string",
            "example": "CO"
          },
          "citizenship": {
            "type": "string",
            "example": "CO"
          },
          "employmentStatus": {
            "type": "string",
            "example": "EMPLOYEE",
            "enum": [
              "EMPLOYEE",
              "SELF_EMPLOYED",
              "RETIRED",
              "UNEMPLOYED",
              "OTHER"
            ]
          },
          "employmentDescription": {
            "type": "string",
            "example": "Software Engineer"
          },
          "employerName": {
            "type": "string",
            "example": "Google"
          },
          "occupation": {
            "type": "string",
            "example": "Software Engineer"
          },
          "investmentProfile": {
            "$ref": "#/components/schemas/InvestmentProfile"
          },
          "kycProfile": {
            "$ref": "#/components/schemas/KycProfile"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "dateOfBirth",
          "email",
          "phone",
          "address",
          "document"
        ]
      },
      "CompanyUserDto": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "example": "Gerlach, Baumbach and Bernhard\n"
          },
          "tradeName": {
            "type": "string",
            "example": "Babbleopia"
          },
          "registeredNumber": {
            "type": "string",
            "example": "123456"
          },
          "legalStructure": {
            "type": "string",
            "enum": [
              "C_CORP_PRIVATE",
              "C_CORP_PUBLIC",
              "HNWI",
              "LLC",
              "LLP",
              "LP",
              "S_CORP",
              "SOLE_PROP",
              "TRUST",
              "NON_PROFIT",
              "OTHER"
            ]
          },
          "description": {
            "type": "string"
          },
          "establishedOn": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/UserAddressDto"
          },
          "mainOwnerUser": {
            "type": "string"
          },
          "ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "naics": {
            "type": "string"
          },
          "naicsDescription": {
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/CompanyUserDocumentDto"
          },
          "investmentProfile": {
            "$ref": "#/components/schemas/InvestmentProfile"
          },
          "kycProfile": {
            "$ref": "#/components/schemas/CompanyKycProfile"
          }
        },
        "required": [
          "companyName",
          "address",
          "document"
        ]
      },
      "CreateUserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING",
              "REJECTED"
            ],
            "example": "ACTIVE"
          },
          "customerId": {
            "type": "string",
            "example": "8ffce092-b97a-48bd-9efa-24c66ac7fe13"
          },
          "type": {
            "type": "string",
            "enum": [
              "PERSON",
              "COMPANY"
            ],
            "example": "PERSON"
          },
          "data": {
            "oneOf": [
              {
                "title": "PERSON",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDto"
                  }
                ]
              },
              {
                "title": "COMPANY",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDto"
                  }
                ]
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "A unique identifier used to identify your existing user.",
            "example": "d00e4f43-2022-42f3-ba1c-dcf4c1dcd934"
          },
          "complianceUrl": {
            "type": "string",
            "example": "https://kyc.example.com"
          },
          "accessLevel": {
            "type": "string",
            "enum": [
              "L0",
              "L1",
              "L2",
              "L3",
              "L4"
            ],
            "example": "L0"
          },
          "note": {
            "type": "string",
            "description": "give you details about the compliance process"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          }
        },
        "required": [
          "id",
          "status",
          "customerId",
          "type",
          "data",
          "complianceUrl",
          "accessLevel",
          "note",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetUserQueryResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUserResponseDto"
            }
          },
          "totalPage": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "users",
          "totalPage"
        ]
      },
      "GetUserByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING",
              "REJECTED"
            ],
            "example": "ACTIVE"
          },
          "customerId": {
            "type": "string",
            "example": "8ffce092-b97a-48bd-9efa-24c66ac7fe13"
          },
          "type": {
            "type": "string",
            "enum": [
              "PERSON",
              "COMPANY"
            ],
            "example": "PERSON"
          },
          "data": {
            "oneOf": [
              {
                "title": "PERSON",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonUserDto"
                  }
                ]
              },
              {
                "title": "COMPANY",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CompanyUserDto"
                  }
                ]
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "A unique identifier used to identify your existing user.",
            "example": "d00e4f43-2022-42f3-ba1c-dcf4c1dcd934"
          },
          "complianceUrl": {
            "type": "string",
            "example": "https://kyc.example.com"
          },
          "accessLevel": {
            "type": "string",
            "enum": [
              "L0",
              "L1",
              "L2",
              "L3",
              "L4"
            ],
            "example": "L0"
          },
          "note": {
            "type": "string",
            "description": "give you details about the compliance process"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          }
        },
        "required": [
          "id",
          "status",
          "customerId",
          "type",
          "data",
          "complianceUrl",
          "accessLevel",
          "note",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "UploadPersonDocumentDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "documentType": {
            "type": "string",
            "enum": [
              "PROVE_OF_ADDRESS_BANK_STATEMENT",
              "PROVE_OF_ADDRESS_UTILITY_BILL",
              "PROVE_OF_ADDRESS_LEASE_AGREEMENT",
              "SOURCE_OF_FUNDS_BANK_STATEMENT",
              "SOURCE_OF_FUNDS_PAYSLIP",
              "KYC_REPORT",
              "PASSPORT",
              "DRIVER_LICENSE",
              "NUIP",
              "RFC",
              "SSN",
              "CURP",
              "CPF",
              "INE",
              "IFE",
              "DNI",
              "DUI"
            ],
            "example": "CURP"
          },
          "frontDocument": {
            "type": "string",
            "format": "binary",
            "description": "Front document file"
          },
          "backDocument": {
            "type": "string",
            "format": "binary",
            "description": "Back document file"
          }
        },
        "required": [
          "userId",
          "documentType",
          "frontDocument"
        ]
      },
      "UploadBusinessDocumentDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "documentType": {
            "type": "string",
            "enum": [
              "PROVE_OF_ADDRESS_BANK_STATEMENT",
              "PROVE_OF_ADDRESS_UTILITY_BILL",
              "PROVE_OF_ADDRESS_LEASE_AGREEMENT",
              "SOURCE_OF_FUNDS_BANK_STATEMENT",
              "SOURCE_OF_FUNDS_PAYSLIP",
              "PROOF_OF_COMPANY_FORMATION",
              "ARTICLES_OF_INCORPORATION",
              "INCORPORATION_DOCUMENTS",
              "KYB_REPORT",
              "NIT",
              "OTHER"
            ],
            "example": "NIT"
          },
          "frontDocument": {
            "type": "string",
            "format": "binary",
            "description": "Front document file"
          },
          "backDocument": {
            "type": "string",
            "format": "binary",
            "description": "Back document file"
          }
        },
        "required": [
          "userId",
          "documentType",
          "frontDocument"
        ]
      },
      "ILevelUpdateInput": {
        "type": "object",
        "properties": {}
      },
      "ILevelDowngradeInput": {
        "type": "object",
        "properties": {}
      },
      "SavingsCustodialAccountDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "UUID"
          },
          "acceptedTermsAndConditions": {
            "type": "boolean",
            "description": "Accept terms and conditions"
          }
        },
        "required": [
          "userId",
          "acceptedTermsAndConditions"
        ]
      },
      "SavingsAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETED",
              "REJECTED"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "userId",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "TransactionsDataReturn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "customerId": {
            "type": "string",
            "example": "8ffce092-b97a-48bd-9efa-24c66ac7fe13"
          },
          "userId": {
            "type": "string",
            "example": "9d23aa10-1b40-4584-a8ea-58aba6099c5c"
          },
          "originAccountId": {
            "type": "string",
            "example": "2e200eb1-d89e-40a3-bb74-45ce3ba61e95"
          },
          "destinationAccountId": {
            "type": "string",
            "example": "f09c5ef6-c15c-4de5-b2dd-1a44d062dc7f"
          },
          "amount": {
            "type": "string",
            "example": "322.1"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEPOSIT",
              "WITHDRAWAL"
            ],
            "example": "DEPOSIT"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-06T00:03:30.791Z"
          }
        },
        "required": [
          "id",
          "customerId",
          "userId",
          "originAccountId",
          "destinationAccountId",
          "amount",
          "type",
          "currency",
          "createdAt",
          "updatedAt"
        ]
      },
      "IGetTransactionsReturn": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionsDataReturn"
            }
          },
          "totalPage": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "transactions",
          "totalPage"
        ]
      },
      "SourceDataDto": {
        "type": "object",
        "properties": {
          "savingsAccountId": {
            "type": "string"
          }
        },
        "required": [
          "savingsAccountId"
        ]
      },
      "DestinationDataDto": {
        "type": "object",
        "properties": {
          "savingsAccountId": {
            "type": "string"
          },
          "externalAccountId": {
            "type": "string"
          }
        },
        "required": [
          "savingsAccountId",
          "externalAccountId"
        ]
      },
      "CreateWithdrawalDto": {
        "type": "object",
        "properties": {
          "source": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SourceDataDto"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceDataDto"
              }
            ]
          },
          "destination": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DestinationDataDto"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationDataDto"
              }
            ]
          },
          "amount": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "source",
          "destination",
          "amount",
          "comment"
        ]
      },
      "Source": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "custodialAccountId": {
            "type": "string"
          }
        },
        "required": [
          "currency",
          "custodialAccountId"
        ]
      },
      "Destination": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "externalAccountId": {
            "type": "string"
          }
        },
        "required": [
          "currency",
          "externalAccountId"
        ]
      },
      "WithdrawalSavingsReturn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "PENDING",
              "PROCESSING",
              "CONFIRMED",
              "REFUNDED",
              "COMPLETED",
              "CANCELED",
              "EXPIRED",
              "FAILED",
              "ERROR",
              "REJECTED"
            ]
          },
          "amount": {
            "type": "number"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEPOSIT",
              "WITHDRAWAL"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "destination": {
            "$ref": "#/components/schemas/Destination"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "amount",
          "userId",
          "type",
          "source",
          "destination",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetBalanceReturn": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "currency",
          "amount"
        ]
      },
      "InstitutionAddressDto": {
        "type": "object",
        "properties": {
          "street1": {
            "type": "string",
            "example": "Main Street1"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NJ"
          },
          "postalCode": {
            "type": "string",
            "example": "12345"
          },
          "countryCode": {
            "type": "string",
            "example": "US"
          }
        },
        "required": [
          "street1",
          "city",
          "state",
          "postalCode",
          "countryCode"
        ]
      },
      "GetDepositInstructionsReturn": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ACH",
              "WIRE"
            ],
            "example": "ACH"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "accountHolderName": {
            "type": "string",
            "example": "Bank Name"
          },
          "accountNumber": {
            "type": "string",
            "example": "111111111111"
          },
          "routingNumber": {
            "type": "string",
            "example": "222222222"
          },
          "memo": {
            "type": "string",
            "example": "A1AABCD"
          },
          "bankAddress": {
            "oneOf": [
              {
                "title": "BANK_DEPOSIT_INSTRUCTIONS",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InstitutionAddressDto"
                  }
                ]
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/InstitutionAddressDto"
              }
            ]
          },
          "depositMessage": {
            "type": "string",
            "example": "AABBCC3311DZEF"
          },
          "bankBeneficiaryName": {
            "type": "string",
            "example": "KillB Bank Name"
          }
        },
        "required": [
          "type",
          "accountHolderName",
          "accountNumber",
          "routingNumber"
        ]
      },
      "GetCryptoDepositInstructionsReturn": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "example": "0x"
          },
          "network": {
            "type": "string",
            "example": "POLYGON"
          },
          "currency": {
            "type": "string",
            "example": "USDC"
          }
        },
        "required": [
          "address",
          "network",
          "currency"
        ]
      },
      "CreateQuotationDto": {
        "type": "object",
        "properties": {
          "fromCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USD",
              "USDC",
              "USDT"
            ]
          },
          "toCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USDC",
              "USDT"
            ]
          },
          "amount": {
            "type": "number"
          },
          "amountIsToCurrency": {
            "type": "boolean"
          },
          "cashInMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "PRE_FUND",
              "PRE_FUND_POLYGON",
              "PRE_FUND_ERC20",
              "PRE_FUND_SOLANA",
              "PRE_FUND_TRON",
              "PRE_FUND_ARBITRUM",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "cashOutMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          }
        },
        "required": [
          "fromCurrency",
          "toCurrency",
          "amount",
          "amountIsToCurrency",
          "cashInMethod",
          "cashOutMethod"
        ]
      },
      "CreateQuotationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fromCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USD",
              "USDC",
              "USDT"
            ]
          },
          "toCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USDC",
              "USDT"
            ]
          },
          "fromAmount": {
            "type": "number"
          },
          "toAmount": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "spotPrice": {
            "type": "number"
          },
          "expiresAt": {
            "type": "number"
          },
          "cashInMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "PRE_FUND",
              "PRE_FUND_POLYGON",
              "PRE_FUND_ERC20",
              "PRE_FUND_SOLANA",
              "PRE_FUND_TRON",
              "PRE_FUND_ARBITRUM",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "cashOutMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          }
        },
        "required": [
          "id",
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "rate",
          "spotPrice",
          "expiresAt",
          "cashInMethod",
          "cashOutMethod"
        ]
      },
      "UpdateQuotationDto": {
        "type": "object",
        "properties": {
          "fromAmount": {
            "type": "number"
          },
          "toAmount": {
            "type": "number"
          }
        },
        "required": [
          "fromAmount",
          "toAmount"
        ]
      },
      "SimulateQuotationResponseDto": {
        "type": "object",
        "properties": {
          "fromCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USD",
              "USDC",
              "USDT"
            ]
          },
          "toCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USDC",
              "USDT"
            ]
          },
          "fromAmount": {
            "type": "number"
          },
          "toAmount": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "cashInMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "PRE_FUND",
              "PRE_FUND_POLYGON",
              "PRE_FUND_ERC20",
              "PRE_FUND_SOLANA",
              "PRE_FUND_TRON",
              "PRE_FUND_ARBITRUM",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "cashOutMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          }
        },
        "required": [
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "rate",
          "cashInMethod",
          "cashOutMethod"
        ]
      },
      "GetQuotationResponseDto": {
        "type": "object",
        "properties": {
          "fromCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USD",
              "USDC",
              "USDT"
            ]
          },
          "toCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USDC",
              "USDT"
            ]
          },
          "amount": {
            "type": "number"
          },
          "amountIsToCurrency": {
            "type": "boolean"
          },
          "cashInMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "PRE_FUND",
              "PRE_FUND_POLYGON",
              "PRE_FUND_ERC20",
              "PRE_FUND_SOLANA",
              "PRE_FUND_TRON",
              "PRE_FUND_ARBITRUM",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "cashOutMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          }
        },
        "required": [
          "fromCurrency",
          "toCurrency",
          "amount",
          "amountIsToCurrency",
          "cashInMethod",
          "cashOutMethod"
        ]
      },
      "CreateBankSimulationDto": {
        "type": "object",
        "properties": {
          "fromCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USD",
              "USDC",
              "USDT"
            ]
          },
          "toCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USDC",
              "USDT"
            ]
          },
          "amount": {
            "type": "number"
          },
          "amountIsToCurrency": {
            "type": "boolean"
          }
        },
        "required": [
          "fromCurrency",
          "toCurrency",
          "amount",
          "amountIsToCurrency"
        ]
      },
      "CustomerAddress": {
        "type": "object",
        "properties": {
          "street1": {
            "type": "string",
            "example": "St. Main Street"
          },
          "street2": {
            "type": "string",
            "example": "St. Main Street"
          },
          "city": {
            "type": "string",
            "example": "City"
          },
          "state": {
            "type": "string",
            "example": "SP"
          },
          "zipCode": {
            "type": "string",
            "example": "01013-000"
          },
          "countryCode": {
            "type": "string",
            "example": "US"
          }
        },
        "required": [
          "street1",
          "street2",
          "city",
          "state",
          "zipCode",
          "countryCode"
        ]
      },
      "CustomerDataDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "individual",
              "business"
            ],
            "example": "individual"
          },
          "firstName": {
            "type": "string",
            "example": "Bruce"
          },
          "lastName": {
            "type": "string",
            "example": "Wayne"
          },
          "companyName": {
            "type": "string",
            "example": "Wayne Company"
          },
          "email": {
            "type": "string",
            "example": "bruce.wayne@company.com"
          },
          "phone": {
            "type": "string",
            "example": "+5511911110000"
          },
          "address": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomerAddress"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAddress"
              }
            ]
          },
          "birthDate": {
            "type": "string",
            "example": "00-00-0000"
          },
          "documentValue": {
            "type": "string",
            "example": "00000000000"
          }
        },
        "required": [
          "type",
          "firstName",
          "lastName",
          "companyName",
          "email",
          "phone",
          "address",
          "birthDate",
          "documentValue"
        ]
      },
      "CreateCustomerBackofficeDto": {
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomerDataDTO"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDataDTO"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "SourceData": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ],
            "example": "usd"
          },
          "paymentRail": {
            "type": "string",
            "enum": [
              "wire",
              "ach"
            ],
            "example": "ach"
          }
        },
        "required": [
          "currency",
          "paymentRail"
        ]
      },
      "DestinationData": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usdc"
            ],
            "example": "usdc"
          },
          "paymentRail": {
            "type": "string",
            "enum": [
              "polygon"
            ],
            "example": "polygon"
          },
          "address": {
            "type": "string",
            "example": "0x"
          }
        },
        "required": [
          "currency",
          "paymentRail",
          "address"
        ]
      },
      "CreateStaticMemoDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "bca929fd-0a24-4711-a637-59448d14a8e8"
          },
          "source": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SourceData"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceData"
              }
            ]
          },
          "destination": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DestinationData"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationData"
              }
            ]
          }
        },
        "required": [
          "customerId",
          "source",
          "destination"
        ]
      },
      "CreateVirtualAccountDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "bca929fd-0a24-4711-a637-59448d14a8e8"
          },
          "source": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SourceData"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceData"
              }
            ]
          },
          "destination": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DestinationData"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationData"
              }
            ]
          }
        },
        "required": [
          "customerId",
          "source",
          "destination"
        ]
      },
      "GetBridgeRefusedReason": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "335ec943-eda1-4f71-8e6f-e678c12b6acf"
          },
          "email": {
            "type": "string",
            "example": "email_example@email.com"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "active",
              "approved",
              "rejected",
              "manual_review"
            ],
            "example": "pending"
          },
          "acceptedTermsOfService": {
            "type": "boolean",
            "example": true
          },
          "rejectionReasons": {
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "userId",
          "email",
          "status",
          "acceptedTermsOfService",
          "rejectionReasons"
        ]
      },
      "UpdateSavingsStrategyDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "31906011-08c1-4a37-9857-67f22c020f01"
          },
          "removeSavingsProduct": {
            "type": "boolean",
            "example": true
          },
          "updateStrategy": {
            "example": [
              "ACH",
              "WIRE"
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "customerId",
          "removeSavingsProduct",
          "updateStrategy"
        ]
      },
      "CreateLayer2SubscriptionsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATION_READY_FOR_SUBMISSION",
              "APPLICATION_SUBMITTED",
              "APPLICATION_PROCESSING",
              "APPLICATION_CHANGE_REQUESTED",
              "APPLICATION_REJECTED",
              "APPLICATION_APPROVED",
              "PAYMENT_CONFIRMED",
              "PAYMENT_EXCHANGE_EXECUTED",
              "TRANSACTION_AUTHORIZED",
              "TRANSACTION_PENDING",
              "TRANSACTION_POSTED",
              "TRANSACTION_CANCELLED",
              "COUNTERPARTY_ACTIVE"
            ],
            "example": "APPLICATION_APPROVED"
          }
        },
        "required": [
          "type"
        ]
      },
      "GetRampsDataResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "cashInMethod": {
            "type": "string"
          },
          "cashOutMethod": {
            "type": "string"
          },
          "originAccountId": {
            "type": "string"
          },
          "destinationAccounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quotationId": {
            "type": "string"
          },
          "quotation": {
            "type": "object"
          },
          "fromCurrency": {
            "type": "string"
          },
          "toCurrency": {
            "type": "string"
          },
          "fromAmount": {
            "type": "number"
          },
          "toAmount": {
            "type": "number"
          },
          "baseAmount": {
            "type": "number"
          },
          "quoteAmount": {
            "type": "number"
          },
          "baseCurrency": {
            "type": "string"
          },
          "quoteCurrency": {
            "type": "string"
          },
          "isPreFunded": {
            "type": "boolean"
          },
          "origin": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "customerId",
          "userId",
          "providerId",
          "status",
          "type",
          "cashInMethod",
          "cashOutMethod",
          "originAccountId",
          "destinationAccounts",
          "quotationId",
          "quotation",
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "baseAmount",
          "quoteAmount",
          "baseCurrency",
          "quoteCurrency",
          "isPreFunded",
          "origin",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetRampsResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "number"
          },
          "currentPage": {
            "type": "number"
          },
          "totalItems": {
            "type": "number"
          },
          "ramps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetRampsDataResponseDto"
            }
          }
        },
        "required": [
          "totalPages",
          "currentPage",
          "totalItems",
          "ramps"
        ]
      },
      "RampTransactionDataResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "transferId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "originAccountId": {
            "type": "string"
          },
          "destinationAccountId": {
            "type": "string"
          },
          "beneficiary": {
            "type": "object"
          },
          "externalId": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "direction": {
            "type": "string"
          },
          "automationId": {
            "type": "number"
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "transferId",
          "customerId",
          "userId",
          "providerId",
          "status",
          "type",
          "originAccountId",
          "destinationAccountId",
          "beneficiary",
          "externalId",
          "currency",
          "amount",
          "module",
          "method",
          "direction",
          "automationId",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetRampTransactionsResponseDto": {
        "type": "object",
        "properties": {
          "rampId": {
            "type": "string"
          },
          "totalTransactions": {
            "type": "number"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RampTransactionDataResponseDto"
            }
          }
        },
        "required": [
          "rampId",
          "totalTransactions",
          "transactions"
        ]
      },
      "CreatePreFundAccountBackofficeDto": {
        "type": "object",
        "properties": {
          "customerName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "passphrase": {
            "type": "string"
          }
        },
        "required": [
          "customerName",
          "address",
          "currency",
          "network",
          "passphrase"
        ]
      },
      "ReRunRampDto": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "newDestinationAccountId": {
            "type": "string"
          }
        },
        "required": [
          "transferId",
          "module",
          "newDestinationAccountId"
        ]
      },
      "ReRunRampsResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "ExecutePendingResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "ManualDispersionRampDto": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string"
          }
        },
        "required": [
          "transferId"
        ]
      },
      "ManualDispersionRampResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "CancelRampDto": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string"
          }
        },
        "required": [
          "transferId"
        ]
      },
      "CancelRampsResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "FailRampDto": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string",
            "format": "uuid"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "transferId"
        ]
      },
      "FailRampsResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "UpdateQuoteDto": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string"
          }
        },
        "required": [
          "transferId"
        ]
      },
      "CheckCashInProcessingDetailDto": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "transferId",
          "status",
          "message"
        ]
      },
      "CheckCashInProcessingResponseDto": {
        "type": "object",
        "properties": {
          "totalChecked": {
            "type": "number"
          },
          "updated": {
            "type": "number"
          },
          "failed": {
            "type": "number"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckCashInProcessingDetailDto"
            }
          }
        },
        "required": [
          "totalChecked",
          "updated",
          "failed",
          "details"
        ]
      },
      "SPEIRefundInstruction": {
        "type": "object",
        "properties": {
          "clabe": {
            "type": "string"
          },
          "beneficiary": {
            "type": "string",
            "example": "Bruce Wayne"
          }
        },
        "required": [
          "clabe",
          "beneficiary"
        ]
      },
      "CryptoRefundInstruction": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "POLYGON",
              "SOLANA",
              "BSC",
              "TRON"
            ],
            "example": "POLYGON"
          },
          "address": {
            "type": "string",
            "example": "Ox"
          },
          "asset": {
            "type": "string",
            "enum": [
              "USDC",
              "USDT"
            ],
            "example": "USDC"
          }
        },
        "required": [
          "network",
          "address",
          "asset"
        ]
      },
      "CreateRampAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "amount"
        ]
      },
      "CashInDetails": {
        "type": "object",
        "properties": {
          "transfiyaAccount": {
            "type": "string"
          }
        }
      },
      "RampDetails": {
        "type": "object",
        "properties": {
          "cashIn": {
            "$ref": "#/components/schemas/CashInDetails"
          }
        }
      },
      "CreateRampInputDto": {
        "type": "object",
        "properties": {
          "quotationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRampAccount"
            }
          },
          "refundInstructions": {
            "description": "You have to use the same method used in the quotation for the deposit",
            "oneOf": [
              {
                "title": "SPEI",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SPEIRefundInstruction"
                  }
                ]
              },
              {
                "title": "WALLET",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CryptoRefundInstruction"
                  }
                ]
              }
            ]
          },
          "externalId": {
            "type": "string",
            "description": "You can send an external id to avoid duplicate ramps"
          },
          "details": {
            "$ref": "#/components/schemas/RampDetails"
          }
        },
        "required": [
          "quotationId",
          "userId"
        ]
      },
      "ISPEIPaymentInfo": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string"
          },
          "Bank": {
            "type": "string"
          },
          "Beneficiary": {
            "type": "string"
          },
          "CLABE": {
            "type": "string"
          },
          "concepto": {
            "type": "string",
            "description": "This code needs to be sent for KillB be able to identify the payment"
          }
        },
        "required": [
          "network",
          "Bank",
          "Beneficiary",
          "CLABE",
          "concepto"
        ]
      },
      "ICOPPaymentInfo": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "ICryptoPaymentInfo": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "network",
          "address"
        ]
      },
      "CreateRampResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "fromCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USD",
              "USDC",
              "USDT"
            ]
          },
          "toCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USDC",
              "USDT"
            ]
          },
          "fromAmount": {
            "type": "number"
          },
          "toAmount": {
            "type": "number"
          },
          "quotationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "cashInMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "PRE_FUND",
              "PRE_FUND_POLYGON",
              "PRE_FUND_ERC20",
              "PRE_FUND_SOLANA",
              "PRE_FUND_TRON",
              "PRE_FUND_ARBITRUM",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "cashOutMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRampAccount"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "CASH_IN_REQUEST",
              "CONVERSION_REQUEST",
              "CASH_OUT_REQUEST",
              "CASH_IN_REQUESTED",
              "CONVERSION_REQUESTED",
              "CASH_OUT_REQUESTED",
              "CASH_IN_PENDING",
              "CONVERSION_PENDING",
              "CASH_OUT_PENDING",
              "CASH_IN_PROCESSING",
              "CONVERSION_PROCESSING",
              "CASH_OUT_PROCESSING",
              "CASH_IN_COMPLETED",
              "CONVERSION_COMPLETED",
              "CASH_OUT_COMPLETED",
              "COMPLETED",
              "CANCELED",
              "FAILED",
              "REJECTED",
              "ERROR"
            ]
          },
          "isPreFunded": {
            "type": "boolean"
          },
          "paymentInfo": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ISPEIPaymentInfo",
                  "title": "MXN"
                },
                {
                  "$ref": "#/components/schemas/ICOPPaymentInfo",
                  "title": "COP"
                },
                {
                  "$ref": "#/components/schemas/ICryptoPaymentInfo",
                  "title": "Crypto"
                }
              ]
            }
          },
          "details": {
            "type": "string",
            "description": "complement information about a transfer, like: Code error"
          },
          "transferProof": {
            "type": "string",
            "description": "Proof of transfer, like: TxHash, url, etc."
          },
          "externalId": {
            "type": "string",
            "description": "External id to avoid duplicate ramps"
          },
          "type": {
            "type": "string",
            "enum": [
              "ON",
              "OFF"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "active",
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "quotationId",
          "userId",
          "cashInMethod",
          "cashOutMethod",
          "accountId",
          "status",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "PatchRampInputDto": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRampAccount"
            }
          }
        }
      },
      "GetRampQueryResponseDto": {
        "type": "object",
        "properties": {
          "ramps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRampResponseDto"
            }
          },
          "totalPage": {
            "type": "number"
          }
        },
        "required": [
          "ramps",
          "totalPage"
        ]
      },
      "GetRampByIdResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "fromCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USD",
              "USDC",
              "USDT"
            ]
          },
          "toCurrency": {
            "type": "string",
            "enum": [
              "MXN",
              "COP",
              "USDC",
              "USDT"
            ]
          },
          "fromAmount": {
            "type": "number"
          },
          "toAmount": {
            "type": "number"
          },
          "quotationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "cashInMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "PRE_FUND",
              "PRE_FUND_POLYGON",
              "PRE_FUND_ERC20",
              "PRE_FUND_SOLANA",
              "PRE_FUND_TRON",
              "PRE_FUND_ARBITRUM",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "cashOutMethod": {
            "type": "string",
            "enum": [
              "SPEI",
              "POLYGON",
              "ERC20",
              "PSE",
              "TRANSFIYA",
              "SOLANA",
              "BSC",
              "TRON"
            ]
          },
          "accountId": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRampAccount"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "CASH_IN_REQUEST",
              "CONVERSION_REQUEST",
              "CASH_OUT_REQUEST",
              "CASH_IN_REQUESTED",
              "CONVERSION_REQUESTED",
              "CASH_OUT_REQUESTED",
              "CASH_IN_PENDING",
              "CONVERSION_PENDING",
              "CASH_OUT_PENDING",
              "CASH_IN_PROCESSING",
              "CONVERSION_PROCESSING",
              "CASH_OUT_PROCESSING",
              "CASH_IN_COMPLETED",
              "CONVERSION_COMPLETED",
              "CASH_OUT_COMPLETED",
              "COMPLETED",
              "CANCELED",
              "FAILED",
              "REJECTED",
              "ERROR"
            ]
          },
          "isPreFunded": {
            "type": "boolean"
          },
          "paymentInfo": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ISPEIPaymentInfo",
                  "title": "MXN"
                },
                {
                  "$ref": "#/components/schemas/ICOPPaymentInfo",
                  "title": "COP"
                },
                {
                  "$ref": "#/components/schemas/ICryptoPaymentInfo",
                  "title": "Crypto"
                }
              ]
            }
          },
          "details": {
            "type": "string",
            "description": "complement information about a transfer, like: Code error"
          },
          "transferProof": {
            "type": "string",
            "description": "Proof of transfer, like: TxHash, url, etc."
          },
          "externalId": {
            "type": "string",
            "description": "External id to avoid duplicate ramps"
          },
          "type": {
            "type": "string",
            "enum": [
              "ON",
              "OFF"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "active",
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "quotationId",
          "userId",
          "cashInMethod",
          "cashOutMethod",
          "accountId",
          "status",
          "type",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetRampStatusResponseDto": {
        "type": "object",
        "properties": {}
      },
      "PathData": {
        "type": "object",
        "properties": {
          "FRONT": {
            "type": "string",
            "example": "https://"
          },
          "BACK": {
            "type": "string",
            "example": "https://"
          }
        },
        "required": [
          "FRONT",
          "BACK"
        ]
      },
      "SourceOfFundsDataResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "a17e0a0d-37f1-4de0-9e12-1214cb2bf545"
          },
          "path": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PathData"
              }
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/PathData"
              }
            ]
          },
          "validated": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "id",
          "path",
          "validated"
        ]
      },
      "GetAllSourceOfDocumentsDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "83308679-d4ea-433f-bf98-c1cebf60793a"
          },
          "customerId": {
            "type": "string",
            "example": "89e0dac7-a503-449f-9004-cc23f02e90bf"
          },
          "sourceOfFunds": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SourceOfFundsDataResponse"
              }
            ]
          }
        },
        "required": [
          "userId",
          "customerId",
          "sourceOfFunds"
        ]
      },
      "ApproveSourceOfFundsInputDto": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string"
          }
        },
        "required": [
          "documentId"
        ]
      },
      "DowngradeUserLevelDto": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "example": "0c4805cf-c97c-4d79-bf7b-4f63a835228e"
          },
          "isBlocked": {
            "type": "boolean"
          }
        },
        "required": [
          "level",
          "userId",
          "isBlocked"
        ]
      },
      "BackOfficeBatchFileCreate": {
        "type": "object",
        "properties": {}
      },
      "UpdateBatchFileDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateTransferToBatchFilesDto": {
        "type": "object",
        "properties": {}
      },
      "BatchFileDataResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Batch file ID"
          },
          "externalId": {
            "type": "string",
            "description": "External ID of the batch file"
          },
          "bank": {
            "type": "string",
            "description": "Bank associated with the batch file",
            "enum": [
              "OCCIDENT",
              "COOPCENTRAL",
              "MANUAL",
              "COBRE",
              "MONO"
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the batch file",
            "enum": [
              "CREATED",
              "PROCESSING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "filename": {
            "type": "string",
            "description": "Filename of the batch file"
          },
          "gcpUrl": {
            "type": "string",
            "description": "GCP URL of the batch file"
          },
          "totalFromAmount": {
            "type": "number",
            "description": "Total from amount in the batch file"
          },
          "totalToAmount": {
            "type": "number",
            "description": "Total to amount in the batch file"
          },
          "successCount": {
            "type": "number",
            "description": "Number of successful transfers"
          },
          "failedCount": {
            "type": "number",
            "description": "Number of failed transfers"
          },
          "transferIds": {
            "description": "Transfer IDs included in the batch file",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "transactionIds": {
            "description": "Transaction IDs related to the batch file",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch file was created"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch file was last updated"
          },
          "processedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch file was processed"
          },
          "completedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch file was completed"
          }
        },
        "required": [
          "id",
          "externalId",
          "bank",
          "status",
          "filename",
          "gcpUrl",
          "totalFromAmount",
          "totalToAmount",
          "successCount",
          "failedCount",
          "transferIds",
          "transactionIds",
          "metadata",
          "createdAt",
          "updatedAt",
          "processedAt",
          "completedAt"
        ]
      },
      "GetBatchFilesResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "number",
            "description": "Total number of pages"
          },
          "currentPage": {
            "type": "number",
            "description": "Current page number"
          },
          "totalItems": {
            "type": "number",
            "description": "Total number of items"
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page"
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Whether there is a next page"
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Whether there is a previous page"
          },
          "batchFiles": {
            "description": "Array of batch files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchFileDataResponseDto"
            }
          }
        },
        "required": [
          "totalPages",
          "currentPage",
          "totalItems",
          "limit",
          "hasNextPage",
          "hasPreviousPage",
          "batchFiles"
        ]
      },
      "CreatePreFundAccountByCustomerDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "network": {
            "type": "string",
            "enum": [
              "POLYGON",
              "ERC20",
              "SOLANA",
              "TRON",
              "ARBITRUM",
              "BSC"
            ],
            "example": "POLYGON"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "USDC",
              "USDT"
            ],
            "example": "USDC"
          }
        },
        "required": [
          "customerId",
          "network",
          "currency"
        ]
      },
      "CreatePreFundAccountByCustomerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "example": "PRE_FUND"
          },
          "address": {
            "type": "string",
            "description": "A wallet address"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "USDC",
              "USDT"
            ],
            "example": "USDC"
          },
          "network": {
            "type": "string",
            "enum": [
              "POLYGON",
              "ERC20",
              "SOLANA",
              "TRON",
              "ARBITRUM",
              "BSC"
            ],
            "example": "POLYGON"
          },
          "active": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2021-09-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2021-09-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "type",
          "address",
          "currency",
          "network",
          "active",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateCustomerStrategyDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "currencyPair": {
            "type": "string"
          },
          "methodPair": {
            "type": "string"
          },
          "premiumFeePercentage": {
            "type": "number"
          },
          "riskFreeFactorPercentage": {
            "type": "number"
          },
          "paymentMethodCostPercentage": {
            "type": "number"
          }
        },
        "required": [
          "customerId",
          "currencyPair",
          "methodPair",
          "premiumFeePercentage",
          "riskFreeFactorPercentage",
          "paymentMethodCostPercentage"
        ]
      },
      "UpdateCustomerLiquidityDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer ID to update liquidity for",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "COP",
            "default": "COP"
          },
          "amount": {
            "type": "number",
            "description": "New liquidity amount",
            "example": 1000000,
            "minimum": 0
          },
          "origin": {
            "type": "string",
            "description": "Origin of the liquidity update",
            "enum": [
              "API",
              "OTC"
            ],
            "example": "API",
            "default": "API"
          },
          "reason": {
            "type": "string",
            "description": "Reason for the liquidity update",
            "example": "Manual adjustment by admin"
          }
        },
        "required": [
          "customerId",
          "currency",
          "amount",
          "origin"
        ]
      },
      "UpdateCustomerLiquidityResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Updated liquidity record ID",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "COP"
          },
          "previousAmount": {
            "type": "number",
            "description": "Previous amount",
            "example": 500000
          },
          "currentAmount": {
            "type": "number",
            "description": "New amount",
            "example": 1000000
          },
          "origin": {
            "type": "string",
            "description": "Origin of the update",
            "enum": [
              "API",
              "OTC"
            ],
            "example": "API"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Update timestamp",
            "example": "2024-01-15T10:30:00.000Z"
          }
        },
        "required": [
          "id",
          "customerId",
          "currency",
          "previousAmount",
          "currentAmount",
          "origin",
          "updatedAt"
        ]
      },
      "GetProvidersBalanceResponseDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          },
          "balance": {
            "type": "number"
          }
        },
        "required": [
          "providerId",
          "providerName",
          "balance"
        ]
      },
      "CreateProviderDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique provider code",
            "example": "BITSO",
            "pattern": "^[A-Z0-9_]+$"
          },
          "name": {
            "type": "string",
            "description": "Provider display name",
            "example": "Bitso Exchange"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the provider is active",
            "example": true,
            "default": true
          },
          "currencies": {
            "description": "Supported currencies (ISO 4217 codes or crypto tickers)",
            "example": [
              "USD",
              "BRL",
              "COP",
              "EUR",
              "USDT",
              "USDC"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "name",
          "active",
          "currencies"
        ]
      },
      "CreateProviderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "code": {
            "type": "string",
            "example": "BITSO"
          },
          "name": {
            "type": "string",
            "example": "Bitso Exchange"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "currencies": {
            "example": [
              "USD",
              "BRL",
              "COP",
              "EUR",
              "USDT",
              "USDC"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "active",
          "currencies",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateMonetizationDto": {
        "type": "object",
        "properties": {
          "fromCurrency": {
            "type": "string",
            "description": "Source currency (ISO 4217 or crypto ticker)",
            "example": "USD",
            "pattern": "^[A-Z]{3,10}$"
          },
          "toCurrency": {
            "type": "string",
            "description": "Target currency (ISO 4217 or crypto ticker)",
            "example": "COP",
            "pattern": "^[A-Z]{3,10}$"
          },
          "fromAmount": {
            "type": "number",
            "description": "Amount to be sent in source currency",
            "example": 100000,
            "minimum": 0
          },
          "toAmount": {
            "type": "number",
            "description": "Amount to be received in target currency",
            "example": 420000000,
            "minimum": 0
          },
          "fxRate": {
            "type": "number",
            "description": "Effective FX rate applied (after margin)",
            "example": 4200,
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "tradeDate": {
            "type": "string",
            "description": "Date and time of the operation (ISO 8601)",
            "example": "2025-09-29T15:00:00Z"
          },
          "status": {
            "type": "string",
            "description": "Status of the monetization",
            "enum": [
              "PENDING",
              "SETTLED",
              "CANCELED"
            ],
            "example": "PENDING",
            "default": "PENDING"
          },
          "outProviderCode": {
            "type": "string",
            "description": "Code of the provider where funds are sent",
            "example": "CITI",
            "pattern": "^[A-Z0-9_]+$"
          },
          "inProviderCode": {
            "type": "string",
            "description": "Code of the provider where funds are received",
            "example": "BANCOLOMBIA",
            "pattern": "^[A-Z0-9_]+$"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata for the operation",
            "example": {
              "note": "Liquidity for payroll"
            }
          }
        },
        "required": [
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "fxRate",
          "tradeDate",
          "status",
          "outProviderCode",
          "inProviderCode"
        ]
      },
      "CreateMonetizationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "fromCurrency": {
            "type": "string",
            "example": "USD"
          },
          "toCurrency": {
            "type": "string",
            "example": "COP"
          },
          "fromAmount": {
            "type": "number",
            "example": 100000
          },
          "toAmount": {
            "type": "number",
            "example": 420000000
          },
          "fxRate": {
            "type": "number",
            "example": 4200
          },
          "tradeDate": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SETTLED",
              "CANCELED"
            ],
            "example": "PENDING"
          },
          "outProviderCode": {
            "type": "string",
            "example": "CITI"
          },
          "inProviderCode": {
            "type": "string",
            "example": "BANCOLOMBIA"
          },
          "metadata": {
            "type": "object",
            "example": {
              "note": "Liquidity for payroll"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          }
        },
        "required": [
          "id",
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "fxRate",
          "tradeDate",
          "status",
          "outProviderCode",
          "inProviderCode",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateBulkMonetizationDto": {
        "type": "object",
        "properties": {
          "monetizations": {
            "description": "Array of monetizations to create",
            "minItems": 1,
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMonetizationDto"
            }
          }
        },
        "required": [
          "monetizations"
        ]
      },
      "BulkMonetizationResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "fromCurrency": {
            "type": "string",
            "example": "USD"
          },
          "toCurrency": {
            "type": "string",
            "example": "COP"
          },
          "fromAmount": {
            "type": "number",
            "example": 100000
          },
          "toAmount": {
            "type": "number",
            "example": 420000000
          },
          "fxRate": {
            "type": "number",
            "example": 4200
          },
          "tradeDate": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          },
          "outProviderCode": {
            "type": "string",
            "example": "CITI"
          },
          "inProviderCode": {
            "type": "string",
            "example": "BANCOLOMBIA"
          },
          "metadata": {
            "type": "object",
            "example": {
              "note": "Liquidity for payroll"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          }
        },
        "required": [
          "id",
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "fxRate",
          "tradeDate",
          "outProviderCode",
          "inProviderCode",
          "createdAt",
          "updatedAt"
        ]
      },
      "BulkMonetizationError": {
        "type": "object",
        "properties": {
          "index": {
            "type": "number",
            "example": 0
          },
          "error": {
            "type": "string",
            "example": "fromCurrency and toCurrency must be different"
          },
          "type": {
            "type": "string",
            "example": "BadRequestException"
          }
        },
        "required": [
          "index",
          "error",
          "type"
        ]
      },
      "CreateBulkMonetizationResponseDto": {
        "type": "object",
        "properties": {
          "successful": {
            "description": "Successfully created monetizations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkMonetizationResult"
            }
          },
          "failed": {
            "description": "Failed monetizations with error details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkMonetizationError"
            }
          },
          "totalRequested": {
            "type": "number",
            "example": 5
          },
          "totalSuccessful": {
            "type": "number",
            "example": 3
          },
          "totalFailed": {
            "type": "number",
            "example": 2
          }
        },
        "required": [
          "successful",
          "failed",
          "totalRequested",
          "totalSuccessful",
          "totalFailed"
        ]
      },
      "UpdateMonetizationDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the monetization (only PENDING can be changed)",
            "enum": [
              "PENDING",
              "SETTLED",
              "CANCELED"
            ],
            "example": "SETTLED"
          },
          "metadata": {
            "type": "object",
            "description": "Updated metadata for the operation",
            "example": {
              "note": "Updated note",
              "processedBy": "admin"
            }
          },
          "revertBalances": {
            "type": "boolean",
            "description": "Whether to revert balances when transitioning to CANCELED status",
            "example": "true",
            "default": false
          }
        }
      },
      "UpdateMonetizationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4d23aa52-1b40-4584-a8ea-58aba6099c5c"
          },
          "fromCurrency": {
            "type": "string",
            "example": "USD"
          },
          "toCurrency": {
            "type": "string",
            "example": "COP"
          },
          "fromAmount": {
            "type": "number",
            "example": 100000
          },
          "toAmount": {
            "type": "number",
            "example": 420000000
          },
          "fxRate": {
            "type": "number",
            "example": 4200
          },
          "tradeDate": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SETTLED",
              "CANCELED"
            ],
            "example": "SETTLED"
          },
          "outProviderCode": {
            "type": "string",
            "example": "CITI"
          },
          "inProviderCode": {
            "type": "string",
            "example": "BANCOLOMBIA"
          },
          "metadata": {
            "type": "object",
            "example": {
              "note": "Updated note"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-09-29T15:00:00.000Z"
          }
        },
        "required": [
          "id",
          "fromCurrency",
          "toCurrency",
          "fromAmount",
          "toAmount",
          "fxRate",
          "tradeDate",
          "status",
          "outProviderCode",
          "inProviderCode",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetBanksResponseDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "0001"
          },
          "companyName": {
            "type": "string",
            "example": "BANCOMEXT"
          },
          "countryCode": {
            "type": "string",
            "example": "MX"
          },
          "tradeName": {
            "type": "string",
            "example": "BANCOMEXT"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "accountTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "code",
          "companyName",
          "countryCode",
          "tradeName",
          "updatedAt",
          "createdAt",
          "accountTypes",
          "id"
        ]
      },
      "FakerCashInDto": {
        "type": "object",
        "properties": {
          "rampId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "rampId"
        ]
      },
      "FakerCashOutDto": {
        "type": "object",
        "properties": {
          "rampId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "rampId"
        ]
      }
    }
  },
  "x-google-backend": {
    "address": "https://killb-tarantino-dev-lodlrlpysa-uc.a.run.app",
    "deadline": 30
  }
}